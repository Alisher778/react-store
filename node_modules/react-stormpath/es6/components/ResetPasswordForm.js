'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LoginLink = require('./LoginLink');

var _LoginLink2 = _interopRequireDefault(_LoginLink);

var _UserActions = require('../actions/UserActions');

var _UserActions2 = _interopRequireDefault(_UserActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResetPasswordForm = function (_React$Component) {
  _inherits(ResetPasswordForm, _React$Component);

  function ResetPasswordForm() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    _classCallCheck(this, ResetPasswordForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(ResetPasswordForm)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {
      fields: {
        email: ''
      },
      isRequestSent: false,
      errorMessage: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ResetPasswordForm, [{
    key: 'onFormSubmit',
    value: function onFormSubmit(e) {
      var self = this;
      e.preventDefault();

      _UserActions2.default.forgotPassword(this.state.fields, function (err) {
        if (err) {
          self.setState({ errorMessage: err.message });
          return;
        }
        self.setState({ isRequestSent: true });
      });
    }
  }, {
    key: 'onEmailChanged',
    value: function onEmailChanged(e) {
      this.state.fields.email = e.target.value;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'row' },
        this.state.isRequestSent ? _react2.default.createElement(
          'div',
          { className: 'col-sm-offset-4 col-xs-12 col-sm-4' },
          this.state.errorMessage === null ? _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'p',
              { className: 'alert alert-success' },
              'We have sent a password reset link to the email address of the account that you specified. Please check your email for this message, then click on the link.'
            ),
            _react2.default.createElement(
              'p',
              { className: 'pull-right' },
              _react2.default.createElement(
                _LoginLink2.default,
                null,
                'Back to Login'
              )
            )
          ) : _react2.default.createElement(
            'div',
            { className: 'alert alert-danger' },
            'Sorry, there was a problem with that email or username.  Please try again.'
          )
        ) : _react2.default.createElement(
          'div',
          { className: 'col-xs-12' },
          _react2.default.createElement(
            'form',
            { className: 'form-horizontal', onSubmit: this.onFormSubmit.bind(this) },
            _react2.default.createElement(
              'div',
              { className: 'form-group' },
              _react2.default.createElement(
                'label',
                { htmlFor: 'spEmail', className: 'col-xs-12 col-sm-4 control-label' },
                'Email or Username'
              ),
              _react2.default.createElement(
                'div',
                { className: 'col-xs-12 col-sm-4' },
                _react2.default.createElement('input', { className: 'form-control', id: 'spEmail', onChange: this.onEmailChanged.bind(this), placeholder: 'Your Email Address' })
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'form-group' },
              _react2.default.createElement(
                'div',
                { className: 'col-sm-offset-4 col-xs-12' },
                this.state.errorMessage ? _react2.default.createElement(
                  'p',
                  { className: 'text-danger' },
                  this.state.errorMessage
                ) : null,
                _react2.default.createElement(
                  'button',
                  { type: 'submit', className: 'btn btn-primary' },
                  'Request Password Reset'
                )
              )
            )
          )
        )
      );
    }
  }]);

  return ResetPasswordForm;
}(_react2.default.Component);

exports.default = ResetPasswordForm;