'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _UserComponent2 = require('./UserComponent');

var _UserComponent3 = _interopRequireDefault(_UserComponent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UserField = function (_UserComponent) {
  _inherits(UserField, _UserComponent);

  function UserField() {
    _classCallCheck(this, UserField);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(UserField).apply(this, arguments));
  }

  _createClass(UserField, [{
    key: '_resolveFieldValue',
    value: function _resolveFieldValue(name) {
      var value = this.state.user;
      var keys = name.split('.');

      while (keys.length) {
        var key = keys.shift();

        if (!(key in value)) {
          throw new Error('Field does not exist');
        }

        value = value[key];
      }

      return value;
    }
  }, {
    key: 'render',
    value: function render() {
      var fieldName = this.props.fieldName;
      var fieldValue = null;

      try {
        fieldValue = this._resolveFieldValue(fieldName);
      } catch (e) {
        if ('default' in this.props) {
          fieldValue = this.props['default'];
        }
      }

      return _react2.default.createElement(
        'span',
        { className: this.props.className },
        fieldValue
      );
    }
  }]);

  return UserField;
}(_UserComponent3.default);

exports.default = UserField;