'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _reactRouter = require('react-router');

var _reactRouter2 = _interopRequireDefault(_reactRouter);

var _Context = require('./../Context');

var _Context2 = _interopRequireDefault(_Context);

var _LoginRoute = require('./LoginRoute');

var _LoginRoute2 = _interopRequireDefault(_LoginRoute);

var _LogoutRoute = require('./LogoutRoute');

var _LogoutRoute2 = _interopRequireDefault(_LogoutRoute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Router = function (_ReactRouter) {
  _inherits(Router, _ReactRouter);

  function Router() {
    _classCallCheck(this, Router);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Router).apply(this, arguments));

    _this.markedRoutes = {
      login: {
        type: _LoginRoute2.default,
        props: null
      },
      logout: {
        type: _LogoutRoute2.default,
        props: null
      }
    };

    _this._mapMarkedRoutes();
    _Context2.default.getInstance().setRouter(_this);
    return _this;
  }

  _createClass(Router, [{
    key: '_mapMarkedRoutes',
    value: function _mapMarkedRoutes() {
      var markedRoutes = this.markedRoutes;

      function getChildren(node) {
        if (!node.props.children || !node.props.children.props || !node.props.children.props.children) {
          return [];
        }
        return node.props.children.props.children;
      }

      function walk(node) {
        // Try and map the node to a marked route
        for (var routeName in markedRoutes) {
          var route = markedRoutes[routeName];
          if (node.type == route.type) {
            markedRoutes[routeName].props = node.props;
            break;
          }
        }

        // Walk children
        getChildren(node).forEach(walk);
      }

      walk(this);
    }
  }, {
    key: 'getLoginRoute',
    value: function getLoginRoute() {
      return this.markedRoutes.login.props;
    }
  }, {
    key: 'getLogoutRoute',
    value: function getLogoutRoute() {
      return this.markedRoutes.logout.props;
    }
  }]);

  return Router;
}(_reactRouter2.default);

exports.default = Router;