'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Context = require('./../Context');

var _Context2 = _interopRequireDefault(_Context);

var _UserConstants = require('./../constants/UserConstants');

var _UserConstants2 = _interopRequireDefault(_UserConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserActions = function () {
  function UserActions(context) {
    _classCallCheck(this, UserActions);

    this.context = context;
  }

  _createClass(UserActions, [{
    key: 'login',
    value: function login(options, callback) {
      this.context.getDispatcher().dispatch({
        actionType: _UserConstants2.default.USER_LOGIN,
        options: options,
        callback: callback
      });
    }
  }, {
    key: 'register',
    value: function register(options, callback) {
      this.context.getDispatcher().dispatch({
        actionType: _UserConstants2.default.USER_REGISTER,
        options: options,
        callback: callback
      });
    }
  }, {
    key: 'forgotPassword',
    value: function forgotPassword(options, callback) {
      this.context.getDispatcher().dispatch({
        actionType: _UserConstants2.default.USER_FORGOT_PASSWORD,
        options: options,
        callback: callback
      });
    }
  }, {
    key: 'verifyEmail',
    value: function verifyEmail(spToken, callback) {
      this.context.getDispatcher().dispatch({
        actionType: _UserConstants2.default.USER_VERIFY_EMAIL,
        options: {
          spToken: spToken
        },
        callback: callback
      });
    }
  }, {
    key: 'changePassword',
    value: function changePassword(options, callback) {
      this.context.getDispatcher().dispatch({
        actionType: _UserConstants2.default.USER_CHANGE_PASSWORD,
        options: options,
        callback: callback
      });
    }
  }, {
    key: 'set',
    value: function set(data) {
      this.context.getDispatcher().dispatch({
        actionType: _UserConstants2.default.USER_SET,
        data: data
      });
    }
  }, {
    key: 'logout',
    value: function logout(callback) {
      this.context.getDispatcher().dispatch({
        actionType: _UserConstants2.default.USER_LOGOUT,
        callback: callback
      });
    }
  }]);

  return UserActions;
}();

exports.default = new UserActions(_Context2.default.getInstance());