'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RequestPool = function () {
  function RequestPool() {
    _classCallCheck(this, RequestPool);

    this.waiting = [];
  }

  _createClass(RequestPool, [{
    key: 'request',
    value: function request(resolver, callback) {
      var waiting = this.waiting;

      waiting.push(callback);

      if (waiting.length === 1) {
        resolver(function () {
          while (waiting.length) {
            waiting.shift().apply(null, arguments);
          }
        });
      }

      return false;
    }
  }]);

  return RequestPool;
}();

function mergeObjects(obj1, obj2) {
  var obj3 = {};

  if (obj1) {
    for (var attrname in obj1) {
      obj3[attrname] = obj1[attrname];
    }
  }

  if (obj2) {
    for (var attrname in obj2) {
      obj3[attrname] = obj2[attrname];
    }
  }

  return obj3;
}

function makeAjaxRequest(method, path, body, callback) {
  var request = new XMLHttpRequest();

  request.open(method.toUpperCase(), path, true);
  request.setRequestHeader('Accept', 'application/json');

  request.onreadystatechange = function () {
    // 4 = Request finished and response is ready.
    // Ignore everything else.
    if (request.readyState !== 4) {
      return;
    }

    var result = {
      status: request.status,
      responseJSON: null
    };

    try {
      if (request.responseText) {
        result.responseJSON = JSON.parse(request.responseText);
      }
      callback(null, result);
    } catch (e) {
      callback(e);
    }
  };

  if (body !== undefined) {
    request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
    request.send(JSON.stringify(body));
  }
}

var UserService = function () {
  function UserService(endpoints) {
    _classCallCheck(this, UserService);

    this.meRequestPool = new RequestPool();

    this.endpoints = {
      me: '/me',
      login: '/login',
      register: '/register',
      verifyEmail: '/verify',
      forgotPassword: '/forgot',
      changePassword: '/change',
      logout: '/logout'
    };

    this.endpoints = mergeObjects(this.endpoints, endpoints);
  }

  _createClass(UserService, [{
    key: '_makeRequest',
    value: function _makeRequest(method, path, body, callback) {
      makeAjaxRequest(method, path, body, function (err, result) {
        if (err) {
          return callback(err);
        }

        var data = result.responseJSON || {};

        if (result.status === 200) {
          callback(null, data);
        } else {
          callback(new Error(data.error || 'Invalid request.'));
        }
      });
    }
  }, {
    key: 'me',
    value: function me(callback) {
      var self = this;
      this.meRequestPool.request(function (resultCallback) {
        self._makeRequest('get', self.endpoints.me, null, resultCallback);
      }, callback);
    }
  }, {
    key: 'login',
    value: function login(options, callback) {
      this._makeRequest('post', this.endpoints.login, options, callback);
    }
  }, {
    key: 'register',
    value: function register(options, callback) {
      this._makeRequest('post', this.endpoints.register, options, callback);
    }
  }, {
    key: 'verifyEmail',
    value: function verifyEmail(spToken, callback) {
      this._makeRequest('get', this.endpoints.verifyEmail + '?sptoken=' + encodeURIComponent(spToken), null, callback);
    }
  }, {
    key: 'forgotPassword',
    value: function forgotPassword(options, callback) {
      this._makeRequest('post', this.endpoints.forgotPassword, options, callback);
    }
  }, {
    key: 'changePassword',
    value: function changePassword(options, callback) {
      this._makeRequest('post', this.endpoints.changePassword, options, callback);
    }
  }, {
    key: 'logout',
    value: function logout(callback) {
      this._makeRequest('get', this.endpoints.logout, null, callback);
    }
  }]);

  return UserService;
}();

exports.default = UserService;