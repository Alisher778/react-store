'use strict';

var _class, _temp;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _reactRouter = require('react-router');

var _Context = require('./../Context');

var _Context2 = _interopRequireDefault(_Context);

var _UserStore = require('./../stores/UserStore');

var _UserStore2 = _interopRequireDefault(_UserStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AuthenticatedRoute = (_temp = _class = function (_Route) {
  _inherits(AuthenticatedRoute, _Route);

  function AuthenticatedRoute() {
    _classCallCheck(this, AuthenticatedRoute);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(AuthenticatedRoute).apply(this, arguments));
  }

  return AuthenticatedRoute;
}(_reactRouter.Route), _class.defaultProps = {
  onEnter: function onEnter(nextState, replaceState, callback) {
    var router = _Context2.default.getInstance().getRouter();

    var loginRoute = router.getLoginRoute();
    var redirectTo = (loginRoute ? loginRoute.path : this.redirectTo) || '/';

    _UserStore2.default.isAuthenticated(function (err, authenticated) {
      if (err || !authenticated) {
        replaceState({ nextPathname: nextState.location.pathname }, redirectTo);
      }
      callback();
    });
  }
}, _temp);
exports.default = AuthenticatedRoute;