'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _flux = require('flux');

var _events = require('events');

var _Context = require('./Context');

var _Context2 = _interopRequireDefault(_Context);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_EventEmitter) {
  _inherits(App, _EventEmitter);

  function App(context) {
    _classCallCheck(this, App);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(App).call(this));

    _this.context = context;
    _this.initialized = false;
    return _this;
  }

  _createClass(App, [{
    key: 'isInitialized',
    value: function isInitialized() {
      return this.initialized;
    }
  }, {
    key: 'init',
    value: function init(options) {
      options = options || {};

      if (this.isInitialized()) {
        throw new Error('React Stormpath already initialized.');
      }

      this.initialized = true;

      // If there's no specified dispatcher, then just create our own one.
      this.context.setDispatcher(options.dispatcher || new _flux.Dispatcher());

      // If there are any endpoints specified, then set these.
      if (options.endpoints) {
        this.context.setEndpoints(options.endpoints);
      }

      this.emit('ready', this.context);
    }
  }]);

  return App;
}(_events.EventEmitter);

exports.default = new App(_Context2.default.getInstance());